import time
import pytest
from app.utils.text_cleaner import TextCleaner

class PerformanceMetrics:
    @staticmethod
    def measure_time(func, *args, **kwargs):
        """Mesure le temps d'ex√©cution d'une fonction."""
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        return result, end_time - start_time

def test_processing_speed(text_cleaner):
    """Test la vitesse de traitement d'un texte long."""
    # Cr√©ation d'un texte long pour le test
    long_text = "This is a test " * 1000
    
    # Mesure du temps de traitement
    _, processing_time = PerformanceMetrics.measure_time(
        text_cleaner.preprocess_text, 
        long_text
    )
    
    # V√©rification que le traitement est rapide
    assert processing_time < 5.0, f"Le traitement a pris {processing_time:.2f} secondes, ce qui est trop long"

def test_batch_processing(text_cleaner):
    """Test le traitement par lots de plusieurs textes."""
    # Cr√©ation d'un ensemble de textes de test
    test_texts = [
        "Hello! This is a test #hashtag @mention http://example.com",
        "RT @user: The quick brown fox #jumps over the lazy dog!",
        "This is a test with √©mojis üòä and special chars @#$%",
        "the quick brown fox jumps over the lazy dog",
        "running jumping swimming"
    ] * 20  # R√©p√©ter 20 fois pour un test significatif
    
    # Mesure du temps de traitement par lots
    start_time = time.time()
    results = []
    for text in test_texts:
        result = text_cleaner.preprocess_text(text)
        results.append(result)
    total_time = time.time() - start_time
    
    # V√©rifications
    assert len(results) == len(test_texts), "Tous les textes n'ont pas √©t√© trait√©s"
    assert total_time < 10.0, f"Le traitement par lots a pris {total_time:.2f} secondes, ce qui est trop long"
    
    # V√©rification de la qualit√© du traitement
    for result in results:
        assert isinstance(result, str), "Le r√©sultat n'est pas une cha√Æne de caract√®res"
        assert result.islower(), "Le texte n'est pas en minuscules"
        assert "http" not in result, "Les URLs n'ont pas √©t√© supprim√©es"
        assert "@" not in result, "Les mentions n'ont pas √©t√© supprim√©es"
        assert "#" not in result, "Les hashtags n'ont pas √©t√© supprim√©s"

def test_memory_efficiency(text_cleaner):
    """Test l'efficacit√© m√©moire en traitant un grand nombre de textes."""
    # Cr√©ation d'un grand nombre de textes
    test_texts = ["Sample text for memory test"] * 1000
    
    # Traitement des textes
    results = []
    for text in test_texts:
        result = text_cleaner.preprocess_text(text)
        results.append(result)
    
    # V√©rification que tous les textes ont √©t√© trait√©s correctement
    assert len(results) == len(test_texts), "Tous les textes n'ont pas √©t√© trait√©s"
    assert all(isinstance(r, str) for r in results), "Certains r√©sultats ne sont pas des cha√Ænes de caract√®res"
    assert all(r == "sample text for memory test" for r in results), "Les textes n'ont pas √©t√© trait√©s correctement"

def test_error_handling(text_cleaner):
    """Test la gestion des erreurs avec des entr√©es invalides."""
    # Test avec None
    result = text_cleaner.preprocess_text(None)
    assert result == "", "Le texte None n'a pas √©t√© g√©r√© correctement"
    
    # Test avec un nombre
    result = text_cleaner.preprocess_text(123)
    assert result == "", "Le nombre n'a pas √©t√© g√©r√© correctement"
    
    # Test avec une liste
    result = text_cleaner.preprocess_text(["test"])
    assert result == "", "La liste n'a pas √©t√© g√©r√©e correctement"
